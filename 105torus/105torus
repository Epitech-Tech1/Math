#!/usr/bin/python3
##
## EPITECH PROJECT, 2021
## 105TORUS
## File description:
## 105torus
##

from sys import argv
import math

def print_argv():
    print("USAGE")
    print("    ./105torus opt a0 a1 a2 a3 a4 n\n")
    print("DESCRIPTION")
    print("    opt       method option:")
    print("                  1 for the bisection method")
    print("                  2 for Newton's method")
    print("                  3 for the secant method")
    print("    a[0-4]    coefficients of the equation")
    print("    n         precision (the application of the polynomial to the solution should")
    print("              be smaller than 10^-n)")
    exit(0)

def check_error():
    i = 2
    if (argv[1] != "1" or argv[1] != "2" or argv[1] != "3"):
        exit(84)

def bisection(a0, a1, a2, a3, a4, prec):
    first_x = 0
    second_x = 0
    value = 0
    first = 0
    second = 1

    for i in range(300):
        value = (first + second) / 2
        first_x = (a4 * pow(value, 4)) + (a3 * pow(value, 3)) + (a2 * pow(value, 2)) + (a1 * value) + a0
        second_x = (a4 * pow(first, 4)) + (a3 * pow(first, 3)) + (a2 * pow(first, 2)) + (a1 * first) + a0
        if (second_x * first_x <= 0):
            second = value
        else:
            first = value
        if (round(first * pow(10, prec)) == round(second * pow(10, prec))):
            break
        if (i <= prec):
            print("x = {:.{pres}}".format(value, pres = prec))
        else:
            print("x = {:.{pres}f}".format(value, pres = prec))

def newton(a0, a1, a2, a3, a4, prec):
    x1 = 0.5
    first_x = 0
    second_x = 0
    x = 0

    print ("x = {:.1f}".format(x1))
    for i in range(300):
        first_x = (a4 * pow(x1, 4)) + (a3 * pow(x1, 3)) + (a2 * pow(x1, 2)) + (a1 * x1) + a0
        second_x = (4 * (a4 * pow(x1, 3))) + (3 * (a3 * pow(x1, 2))) + (2 * (a2 * x1)) + a1
        if (second_x == 0):
            exit(84)
        x = x1 - (first_x / second_x)
        if (round(x1 * pow(10, prec)) == round(x * pow(10, prec))):
            break
        print("x = {:.{pres}}".format(x, pres = prec))
        x1 = x

def secant(a0, a1, a2, a3, a4, prec):
    first = 0
    second = 1
    first_x = 0
    second_x = 0
    x = 0

    for i in range(300):
        
        first_x = (a4 * pow(first, 4)) + (a3 * pow(first, 3)) + (a2 * pow(first, 2)) + (a1* first) + a0
        second_x = (a4 * pow(second, 4)) + (a3 * pow(second, 3)) + (a2 * pow(second, 2)) + (a1* second) + a0
        if ((second_x - first_x) == 0):
            exit(84)
        x = second - ((second_x) * (second - first) / (second_x - first_x))
        if (round(first * pow(10, prec)) == round(second * pow(10, prec))):
            break
        if (i == 0):
            print("x = {:.1f}".format(x))
        else:
            print("x = {:.{pres}f}".format(x, pres = prec))
        first = second
        second = x

def process(opt, a0, a1, a2, a3, a4, prec):
    if (opt == 1):
        bisection(a0, a1, a2, a3, a4, prec)
    if (opt == 2):
        newton(a0, a1, a2, a3, a4, prec)
    else:
        secant(a0, a1, a2, a3, a4, prec)

def princ():
    if len(argv) == 2 and argv[1] == "-h":
        print_argv()
    if len(argv) != 8:
        exit(84)
    opt = int(argv[1])
    a0 = float(argv[2])
    a1 = float(argv[3])
    a2 = float(argv[4])
    a3 = float(argv[5])
    a4 = float(argv[6])
    prec = int(argv[7])
    process(opt, a0, a1, a2, a3, a4, prec)

if __name__ == "__main__":
    try:
        princ()
    except Exception as excp:
        print("Error:", excp)
        exit(84)